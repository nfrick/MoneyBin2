//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MoneyBinEntities : DbContext
    {
        public MoneyBinEntities()
            : base("name=MoneyBinEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CalendarioItem> Calendario { get; set; }
        public virtual DbSet<Pagamento> Pagamentos { get; set; }
        public virtual DbSet<Banco> Bancos { get; set; }
        public virtual DbSet<Conta> Contas { get; set; }
        public virtual DbSet<Ativo> Ativos { get; set; }
        public virtual DbSet<SerieHistorica> SeriesHistoricas { get; set; }
        public virtual DbSet<Regra> Regras { get; set; }
        public virtual DbSet<BalanceItem> Balance { get; set; }
        public virtual DbSet<Operacao> Operacoes { get; set; }
        public virtual DbSet<OperacaoTipo> OperacoesTipos { get; set; }
        public virtual DbSet<AtivoUltimoPreco> AtivosUltimosPrecos { get; set; }
        public virtual DbSet<ContaFundo> ContasFundos { get; set; }
        public virtual DbSet<ContaMes> ContasMeses { get; set; }
        public virtual DbSet<Fundo> Fundos { get; set; }
        public virtual DbSet<FundoMes> FundosMeses { get; set; }
        public virtual DbSet<Movimento> Movimentos { get; set; }
        public virtual DbSet<LCA> LCAs { get; set; }
        public virtual DbSet<LCAMes> LCAMeses { get; set; }
        public virtual DbSet<LCAMovimento> LCAMovimentos { get; set; }
        public virtual DbSet<Acumulada> QtdsAcumuladas { get; set; }
    
        public virtual int spBalanceSelectByGrupoCatSubCat(string grp, string cat, string sub)
        {
            var grpParameter = grp != null ?
                new ObjectParameter("grp", grp) :
                new ObjectParameter("grp", typeof(string));
    
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            var subParameter = sub != null ?
                new ObjectParameter("sub", sub) :
                new ObjectParameter("sub", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBalanceSelectByGrupoCatSubCat", grpParameter, catParameter, subParameter);
        }
    
        public virtual int spBalanceUpdateByGrupoCatSubCat(string grp, string cat, string sub, string newgrp, string newcat, string newsub, string listOfIDs)
        {
            var grpParameter = grp != null ?
                new ObjectParameter("grp", grp) :
                new ObjectParameter("grp", typeof(string));
    
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            var subParameter = sub != null ?
                new ObjectParameter("sub", sub) :
                new ObjectParameter("sub", typeof(string));
    
            var newgrpParameter = newgrp != null ?
                new ObjectParameter("newgrp", newgrp) :
                new ObjectParameter("newgrp", typeof(string));
    
            var newcatParameter = newcat != null ?
                new ObjectParameter("newcat", newcat) :
                new ObjectParameter("newcat", typeof(string));
    
            var newsubParameter = newsub != null ?
                new ObjectParameter("newsub", newsub) :
                new ObjectParameter("newsub", typeof(string));
    
            var listOfIDsParameter = listOfIDs != null ?
                new ObjectParameter("listOfIDs", listOfIDs) :
                new ObjectParameter("listOfIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBalanceUpdateByGrupoCatSubCat", grpParameter, catParameter, subParameter, newgrpParameter, newcatParameter, newsubParameter, listOfIDsParameter);
        }
    
        public virtual int spBalance(Nullable<int> contaID, Nullable<System.DateTime> inicio, Nullable<System.DateTime> termino)
        {
            var contaIDParameter = contaID.HasValue ?
                new ObjectParameter("ContaID", contaID) :
                new ObjectParameter("ContaID", typeof(int));
    
            var inicioParameter = inicio.HasValue ?
                new ObjectParameter("Inicio", inicio) :
                new ObjectParameter("Inicio", typeof(System.DateTime));
    
            var terminoParameter = termino.HasValue ?
                new ObjectParameter("Termino", termino) :
                new ObjectParameter("Termino", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBalance", contaIDParameter, inicioParameter, terminoParameter);
        }
    
        public virtual int spBalanceItemDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBalanceItemDelete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spBalanceItemInsert(Nullable<int> contaID, Nullable<System.DateTime> data, string historico, string documento, Nullable<decimal> valor, Nullable<bool> afetaSaldo, string grupo, string categoria, string subCategoria, string descricao)
        {
            var contaIDParameter = contaID.HasValue ?
                new ObjectParameter("ContaID", contaID) :
                new ObjectParameter("ContaID", typeof(int));
    
            var dataParameter = data.HasValue ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(System.DateTime));
    
            var historicoParameter = historico != null ?
                new ObjectParameter("Historico", historico) :
                new ObjectParameter("Historico", typeof(string));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("Valor", valor) :
                new ObjectParameter("Valor", typeof(decimal));
    
            var afetaSaldoParameter = afetaSaldo.HasValue ?
                new ObjectParameter("AfetaSaldo", afetaSaldo) :
                new ObjectParameter("AfetaSaldo", typeof(bool));
    
            var grupoParameter = grupo != null ?
                new ObjectParameter("Grupo", grupo) :
                new ObjectParameter("Grupo", typeof(string));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("Categoria", categoria) :
                new ObjectParameter("Categoria", typeof(string));
    
            var subCategoriaParameter = subCategoria != null ?
                new ObjectParameter("SubCategoria", subCategoria) :
                new ObjectParameter("SubCategoria", typeof(string));
    
            var descricaoParameter = descricao != null ?
                new ObjectParameter("Descricao", descricao) :
                new ObjectParameter("Descricao", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spBalanceItemInsert", contaIDParameter, dataParameter, historicoParameter, documentoParameter, valorParameter, afetaSaldoParameter, grupoParameter, categoriaParameter, subCategoriaParameter, descricaoParameter);
        }
    
        public virtual int spBalanceItemUpdate(Nullable<int> iD, Nullable<bool> afetaSaldo, string grupo, string categoria, string subCategoria, string descricao)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var afetaSaldoParameter = afetaSaldo.HasValue ?
                new ObjectParameter("AfetaSaldo", afetaSaldo) :
                new ObjectParameter("AfetaSaldo", typeof(bool));
    
            var grupoParameter = grupo != null ?
                new ObjectParameter("Grupo", grupo) :
                new ObjectParameter("Grupo", typeof(string));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("Categoria", categoria) :
                new ObjectParameter("Categoria", typeof(string));
    
            var subCategoriaParameter = subCategoria != null ?
                new ObjectParameter("SubCategoria", subCategoria) :
                new ObjectParameter("SubCategoria", typeof(string));
    
            var descricaoParameter = descricao != null ?
                new ObjectParameter("Descricao", descricao) :
                new ObjectParameter("Descricao", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBalanceItemUpdate", iDParameter, afetaSaldoParameter, grupoParameter, categoriaParameter, subCategoriaParameter, descricaoParameter);
        }
    
        public virtual int spExportToAccessExtrato(string accessDB)
        {
            var accessDBParameter = accessDB != null ?
                new ObjectParameter("AccessDB", accessDB) :
                new ObjectParameter("AccessDB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExportToAccessExtrato", accessDBParameter);
        }
    
        public virtual ObjectResult<Classificacao> spClassificacao()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Classificacao>("spClassificacao");
        }
    
        public virtual ObjectResult<CalendarioMes> spCalendarioMeses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalendarioMes>("spCalendarioMeses");
        }
    
        public virtual ObjectResult<CalendarioItem> spCalendarioRefresh(Nullable<short> ano, Nullable<short> mes)
        {
            var anoParameter = ano.HasValue ?
                new ObjectParameter("Ano", ano) :
                new ObjectParameter("Ano", typeof(short));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("Mes", mes) :
                new ObjectParameter("Mes", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalendarioItem>("spCalendarioRefresh", anoParameter, mesParameter);
        }
    
        public virtual ObjectResult<CalendarioItem> spCalendarioRefresh(Nullable<short> ano, Nullable<short> mes, MergeOption mergeOption)
        {
            var anoParameter = ano.HasValue ?
                new ObjectParameter("Ano", ano) :
                new ObjectParameter("Ano", typeof(short));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("Mes", mes) :
                new ObjectParameter("Mes", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalendarioItem>("spCalendarioRefresh", mergeOption, anoParameter, mesParameter);
        }
    
        public virtual ObjectResult<SerieHistorica> spSerieHistorica(string codigo, Nullable<System.DateTime> inicio, Nullable<System.DateTime> termino)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var inicioParameter = inicio.HasValue ?
                new ObjectParameter("inicio", inicio) :
                new ObjectParameter("inicio", typeof(System.DateTime));
    
            var terminoParameter = termino.HasValue ?
                new ObjectParameter("termino", termino) :
                new ObjectParameter("termino", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SerieHistorica>("spSerieHistorica", codigoParameter, inicioParameter, terminoParameter);
        }
    
        public virtual ObjectResult<SerieHistorica> spSerieHistorica(string codigo, Nullable<System.DateTime> inicio, Nullable<System.DateTime> termino, MergeOption mergeOption)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var inicioParameter = inicio.HasValue ?
                new ObjectParameter("inicio", inicio) :
                new ObjectParameter("inicio", typeof(System.DateTime));
    
            var terminoParameter = termino.HasValue ?
                new ObjectParameter("termino", termino) :
                new ObjectParameter("termino", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SerieHistorica>("spSerieHistorica", mergeOption, codigoParameter, inicioParameter, terminoParameter);
        }
    
        public virtual ObjectResult<SerieHistoricaDateRange> spSerieHistoricaDateRange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SerieHistoricaDateRange>("spSerieHistoricaDateRange");
        }
    
        public virtual ObjectResult<SituacaoImpostoRenda> spSituacaoImpostoRenda(Nullable<int> contaID, Nullable<int> ano)
        {
            var contaIDParameter = contaID.HasValue ?
                new ObjectParameter("ContaID", contaID) :
                new ObjectParameter("ContaID", typeof(int));
    
            var anoParameter = ano.HasValue ?
                new ObjectParameter("Ano", ano) :
                new ObjectParameter("Ano", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SituacaoImpostoRenda>("spSituacaoImpostoRenda", contaIDParameter, anoParameter);
        }
    }
}
